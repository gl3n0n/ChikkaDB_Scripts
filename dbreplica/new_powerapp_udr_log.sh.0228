#!/bin/bash

. /etc/profile
#. /home/mysql/.bash_profile

# CREATED BY ALLAN FAYLONA 2014-02-06
# PULL DATA LOGS FROM application server

var_date=`date +%Y_%m_%d -d '5 day ago'`
proc_date=`date +%Y-%m-%d -d '5 day ago'`
#var_date=`date +%Y_%m_%d`
#proc_date=`date +%Y-%m-%d` 
var_cur=`date +%Y%m%d`
# %k     hour ( 0..23)
var_dir="/home/mysql/vars"
var_log="/home/mysql/log"
var_dmp="/mnt/paywall_dmp/dmp"
dl_loc_dir="/mnt/paywall_dmp/udr/local_file_log"
script_dir="/home/mysql/scripts"
dl_rem_dir="/mnt/paywall_dmp/udr/remote_file_log"
expect_dir="/home/mysql/scripts/expect"
exp_ftp="new.udr_logs_allgetter.exp"
exp_dllist="udrdl_list.exp"
tmpload_scripts_dir="/mnt/paywall_dmp/udr/udr_load_scripts"
export var_date var_cur var_dir var_log var_dmp proc_date
var_time=`date +%T`
var_usr=`head -1 $var_dir/usr.list`
var_pn=`head -1  $var_dir/pn.list`
var_chk=`tail -1  $var_dir/pn.list`
var_chk2=`tail -2  $var_dir/pn.list | head -1 `
db_prt=3307
db_host="127.0.0.1"
db_conn="mysql -ustats -pstats test -h$db_host -P$db_prt"
db_opt="-N -e"


logger(){
  echo "`date` : $*" >> $var_log/$var_cur.udr.log
}


# 1 
split_file() {
    cd $3    
    split -l $1 $2
    ls $3/x* |  awk '{print $1}' | sed '/^\s*$/d' > $3/$4
    bnum=1
    cnt=0
    cnter=0
    while read line
    do
       mv $line $line"."$bnum
       ((bnum ++))
    done <  $3/$4
    ftp_count=`ls $3/x* | wc -l`
    export ftp_count
}
# 2 
etl_proc() {

    if [ $5 = 1 ] ; then
        logger "UDR Transfer Ongoing"       
        cd $2
        ls $2/x* | awk '{print $1}' | sed '/^\s*$/d' > $2/ftp_list
        COUNTER=1 
        while read line 
        do  
  #          cd "$1"/ftp_"$COUNTER"
            if [ ! -d "$1"/ftp_"$COUNTER" ] ; then
               mkdir "$1"/ftp_"$COUNTER"
            fi

            while read line
            do
                echo " cd "$1"/ftp_"$COUNTER"
                $expect_dir/$exp_ftp $var_usr $var_pn $line " >> "$1"/ftp_"$COUNTER"/sftp.sh
            done < $line
            
            chmod 700 "$1"/ftp_"$COUNTER"/sftp.sh
            "$1"/ftp_"$COUNTER"/sftp.sh >> /tmp/"$COUNTER"_tx.log 2>&1 &
            ((COUNTER++))
      
        done < $2/ftp_list

        proc_check 1 3     
        find $1 -name "SANDVINE_01_"$4"*" -printf "%f\n" > $3/$4"_udrdl_loc_list"
        logger "UDR Transfer Completed"



    elif [ $5 = 2 ] ; then

         find $1 -name "SANDVINE*.bz2" -exec ls {} \; > $3"/"$var_date"_mvList" 
         bnum=1
         cnt=0
         cnter=0
         COUNTER=1
         cnt2=1
         logger "Renaming of UDR Ongoing"
         while read line
         do
             ((cnt++))
             mv $line $line"-"$cnt
             ((cnter++))
             if ((cnt ==20)) ; then
                cnt=0
             fi
         done < $3"/"$var_date"_mvList"
         echo $3"/"$var_date"_mvList" 
         proc_check 3 1 
         echo $4/ftp_list
         logger "Renaming of UDR Completed"
         logger "Log Reconstruction In Progress" 

         while read line
         do
              cd "$1"/ftp_"$COUNTER"
              echo "cd "$1"/ftp_"$COUNTER"
              for a in \`ls $2\`
              do
                  bzcat \$a | awk -F',' '{printf \$4\"+\"\$7\"+\"\$14\"+\"\$15\"+\"\$16\"+\"\$17\"+\"\$18 \"\\n\"}'  | awk -F'+' '{printf substr(\$1,0,10)\",\"\$3\",\"\$4\",\"\$5\",\"\$8\"\\n\"}' | sed '1d' > \$a-txt
              done " > $1"/ftp_"$COUNTER"/"$COUNTER"_bzcatp.sh"

              chmod 700 $1"/ftp_"$COUNTER"/"$COUNTER"_bzcatp.sh"
    #          "$1"/ftp_"$COUNTER"/"$COUNTER"_bzcatp.sh  >> /tmp/"$COUNTER"_bz.log 2>&1 &
 
              ((COUNTER++))
         done < $2/ftp_list
         proc_check 2 3
         logger "Log Reconstrunction Completed"

#         cleanup_proc $1 $2 $3 $4 3
#         proc_check 4 5

 #        logger "DB Dump in Progress"           

 #        until [ $cnt2 -eq 21 ] ;
 #        do
  #           find $1 -name "*$cnt2-txt" | grep -e "*bz2-$cnt2-txt" | xargs -r -P2  ls > $tmpload_scripts_dir/dbload_list.$cnt2
  #           while read line 
   #          do
   #              echo "\`$db_conn $db_opt \" ALTER TABLE test.udr_$cnt2 disable keys; SET BULK_INSERT_BUFFER_SIZE = 20*1024*1024; LOAD DATA LOCAL INFILE '$line' IGNORE  INTO TABLE test.udr_$cnt2  FIELDS TERMINATED by ',' (tx_date,phone,source,service,b_usage)\"\`" >> $tmpload_scripts_dir/load_sql/$cnt2-$var_date.sql
    #         done < $tmpload_scripts_dir/dbload_list.$cnt2 
 
     #        chmod 700  $tmpload_scripts_dir/load_sql/$cnt2-$var_date.sql
     #        $tmpload_scripts_dir/load_sql/$cnt2-$var_date.sql >> /tmp/"$var_date"_dbload.log 2>&1 &
     #        ((cnt2++))
     #    done

      #   logger "DB Dump Completed"
    fi

}

cleanup_proc() {

    if [ $5 = 1 ] ; then

       dbcnt=1
       logger "Test DB Cleanup"
       until [ $dbcnt -eq 21 ] ;
       do
          `$db_conn $db_opt "TRUNCATE test.udr_$dbcnt"`
           ((dbcnt++))
       done
             logger "Test DB Completed"

    elif [ $5 = 2 ] ; then 
       dbcnt=1
       logger "Script and Log Cleanup"
       find $2 -name "x*" -type f -exec rm -f {} \;
       find $2 -name "ftp_list" -type f -exec rm -f {} \;
       find $2 -name "spl.txt" -type f -exec rm -f {} \;
       find $6 -name "*.sql"  -type f -exec rm -f {} \;
       find $6 -name "dbload_list"  -type f -exec rm -f {} \;
       find $1 -type d -name "ftp_*" -exec rm -r {} \;
       until [ $dbcnt -eq 21 ] ;
       do
          `$db_conn $db_opt "ALTER TABLE test.udr_$dbcnt ENABLE KEYS"`
          ((dbcnt++))
       done
       logger "Script and Log Completed"

     elif [ $5 = 3 ] ; then

       logger "Bzip Cleanup Started"
       find $1  -name "SANDVINE*bz2*" | cut -d"-" -f1,2 | xargs -r -P2 rm -f
       logger "Bzip2 Cleanup Completed"

    fi 

}


proc_check() {

    if [ $1 = 1 ]; then
       count_ps=`ps aux| grep "sftp dbadmin@172.17.250.62"  | grep -v ? | grep -v S+ |  wc -l`
       until [ $count_ps -eq 0 ] ;
       do
          sleep $2m
          let count_ps-=1
          count_ps=`ps aux| grep "sftp dbadmin@172.17.250.62"| grep -v ? | grep -v S+ | wc -l`
       done

    elif [ $1 = 2 ]; then
         count_ps=`ps aux| grep bzcat | grep -v ? | grep -v S+ |  wc -l`
         until [ $count_ps -eq 0 ] ;
         do
            sleep $2m
            let count_ps-=1
            count_ps=`ps aux| grep bzcat | grep -v ? | grep -v S+ |  wc -l`
            echo $count_ps
         done

    elif [ $1 = 3 ]; then
         count_ps_x=`ps aux| grep mv | grep -v "?" | grep -v S+ |  wc -l`
         until [ $count_ps_x -eq 0 ] ;
         do
            sleep $2m
            let count_ps-=1
            count_ps_x=`ps aux| grep mv | grep -v "?" | grep -v S+ |  wc -l`
            echo $count_ps
         done

    elif [ $1 = 4 ]; then
         count_ps_x=`ps aux| grep rm | grep -v "?" | grep -v S+ |  wc -l`
         until [ $count_ps_x -eq 0 ] ;
         do
            sleep $2m
            let count_ps-=1
            count_ps_x=`ps aux| grep rm | grep -v "?" | grep -v S+ |  wc -l`
            echo $count_ps
         done

  else
        Logger "Invalid Procedure"
  fi 


}
logger "UDR Stats Process Started"
logger "Generating List for UDR to download"
cleanup_proc $var_dmp/udr $dl_rem_dir $dl_loc_dir $var_date 1 $tmpload_scripts_dir 
cleanup_proc $var_dmp/udr $dl_rem_dir $dl_loc_dir $var_date 2 $tmpload_scripts_dir
$expect_dir/$exp_dllist $var_usr $var_pn $var_date > $dl_rem_dir/"$var_date"_udrdl_rem_list 
UdrDLList=`cat $dl_rem_dir/"$var_date"_udrdl_rem_list| grep udr.bz2|wc -l | awk '{print $1}'` 
logger "Total number of UDR files to Transfer: $UdrDLList"

cat $dl_rem_dir/"$var_date"_udrdl_rem_list | grep udr.bz2 |  awk '{print $9}' | sed 's/\/mnt\/sandvine.dock\/sandvine\/target\/UDR\///g' > $dl_rem_dir/b_"$var_date"_udrdl_rem_list

cat $dl_rem_dir/"$var_date"_udrdl_rem_list | grep udr.bz2 |  awk '{print $9}' > $dl_rem_dir/b_"$var_date"c_udrdl_rem_list

split_file 50 $dl_rem_dir/b_"$var_date"c_udrdl_rem_list $dl_rem_dir spl.txt
etl_proc $var_dmp/udr $dl_rem_dir  $dl_loc_dir $var_date 1 
DLudr=`cat $dl_loc_dir/"$var_date"_udrdl_loc_list | wc -l`

find $var_dmp/udr -name "SANDVINE_01_"$var_date"*bz2" -printf "%f\n" > $dl_loc_dir"/"$var_date"_udrdl_loc_list"
DLudr=`cat $dl_loc_dir"/"$var_date"_udrdl_loc_list" | wc -l`
logger "Total number of Transferred UDR files: $DLudr"
sort $dl_rem_dir/b_"$var_date"_udrdl_rem_list  --output=$dl_rem_dir/sorted_"$var_date"dlist
sort $dl_loc_dir/"$var_date"_udrdl_loc_list --output=$dl_loc_dir/sorted_"$var_date"_dllist
diff -q --ignore-all-space --ignore-blank-lines $dl_rem_dir/sorted_"$var_date"dlist $dl_loc_dir/sorted_"$var_date"_dllist > /tmp/remot_local_chk.txt


## SIMULA DITO
 if [  -s "/tmp/remot_local_chk.txt" ] ; then
    echo "FILE not match"
    logger "Error: Downloaded Files Does not match with Source" 
 else
    
    logger "Files Match With Source"
    find $var_dmp/udr -name "sftp.sh"  -exec rm -f '{}' \;
     etl_proc $var_dmp/udr $dl_rem_dir  $dl_loc_dir $var_date 2 
#    $var_dmp/udr $tmpload_scripts_dir $dl_loc_dir $dl_rem_dir 3 2     
      # FOR TOP TALKERS
#       cd $var_dmp/udr
#      logger "Generating Reports for TopTalkers"
#     find $var_dmp/udr -name  'SANDVINE*.udr*.bz2' -exec sh /home/mysql/scripts/toptalker_loader.sh {} \; 

 fi

