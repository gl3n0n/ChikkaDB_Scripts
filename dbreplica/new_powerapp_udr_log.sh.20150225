#!/bin/bash

. /etc/profile
#. /home/mysql/.bash_profile

# CREATED BY ALLAN FAYLONA 2014-02-06
# PULL DATA LOGS FROM application server

var_date=`date +%Y_%m_%d -d '2 day ago'`
proc_date=`date +%Y-%m-%d -d '2 day ago'`
#var_date=`date +%Y_%m_%d`
#proc_date=`date +%Y-%m-%d` 
var_cur=`date +%Y%m%d`
# %k     hour ( 0..23)
var_dir="/home/mysql/vars"
var_log="/home/mysql/log"
var_dmp="/mnt/paywall_dmp/dmp"
dl_loc_dir="/mnt/paywall_dmp/udr/local_file_log"
script_dir="/home/mysql/scripts"
#dl_rem_dir="/mnt/paywall_dmp/udr/remote_file_log"
dl_rem_dir="/mnt/paywall_dmp/udr/remote_file_log"
expect_dir="/home/mysql/scripts/expect"
export var_date var_cur var_dir var_log var_dmp proc_date
var_time=`date +%T`
var_usr=`head -1 $var_dir/usr.list`
var_pn=`head -1  $var_dir/pn.list`
var_chk=`tail -1  $var_dir/pn.list`
var_chk2=`tail -2  $var_dir/pn.list | head -1 `
db_prt=3307
db_host="127.0.0.1"
db_conn="mysql -ustats -p$var_chk2 archive_powerapp_flu -h$db_host -P$db_prt"
db_opt="-N -e"


logger(){
  echo "`date` : $*" >> $var_log/$var_cur.udr.log
}


# 1 
split_file() {
    cd $3    
    split -l $1 $2
    ls $3/x* |  awk '{print $1}' | sed '/^\s*$/d' > $3/$4
    bnum=1
    cnt=0
    cnter=0
    while read line
    do
       mv $line $line"."$bnum
       ((bnum ++))
    done <  $3/$4
    ftp_count=`ls $3/x* | wc -l`
    export ftp_count
}
# 2 
dl_udr_process() {
   cd $1
    ls "$2"/x* | awk '{print $1}' | sed '/^\s*$/d' > $2/ftp_list
    COUNTER=1


   while read line 
   do  
       cd "$1"/ftp_"$COUNTER"
       if [ ! -d "$1"/ftp_"$COUNTER" ] ; then
         mkdir "$1"/ftp_"$COUNTER"
       fi
       while read line
       do
           cd "$1"/ftp_"$COUNTER"
           pwd
           $expect_dir/new.udr_logs_allgetter.exp $var_usr $var_pn $line
       done < $line
       ((COUNTER++))
   done < $2/ftp_list
     
    find $1 -name "SANDVINE_01_"$4"*" -exec ls '{}' \; > $3/$4"_udrdl_loc_list"
}

udr_etl(){
 cd $var_dmp/udr
 ls *"$var_date"*.bz2.txt |  awk '{print $1}' | sed '/^\s*$/d' > /tmp/data_etl_list 
 bnum=1
 cnt=0
 cnter=0
 while read line
 do
    split -l 500001 $line
    for i in `ls $var_dmp/udr | grep xa`
    do
      mv $i $var_date"."$bnum
    #  mv $line kk/
      ((bnum ++))
    done
 done < /tmp/data_etl_list
 
#  cd $var_dmp/udr
  ls $var_date.* |  awk '{print $1}' | sed '/^\s*$/d' > /tmp/split

 while read line
 do
    ((cnt++))
    mv $var_dmp/udr/$line $var_dmp/udr/$line"-udr_"$cnt
    logger "DB Import Started"
    `$db_conn $db_opt "TRUNCATE TABLE test.udr_$cnt; ALTER TABLE test.udr_$cnt disable keys; SET BULK_INSERT_BUFFER_SIZE = 20*1024*1024; LOAD DATA LOCAL INFILE '$var_dmp/udr/$line"-udr_"$cnt'  IGNORE  INTO TABLE test.udr_$cnt  FIELDS TERMINATED by ',' (tx_date,phone,source,service,b_usage)"`

 #  `$db_conn $db_opt  "TRUNCATE TABLE test.udr_$cnt; ALTER TABLE test.udr_$cnt disable keys; SET BULK_INSERT_BUFFER_SIZE = 20*1024*1024; LOAD DATA LOCAL INFILE '$var_dmp/udr/$cnt"_"$line'  IGNORE  INTO TABLE test.udr_$cnt  FIELDS TERMINATED by ',' IGNORE 1 LINES (tx_date,phone,source,service,b_usage)"` 
    logger "DB Import Complete"
    ((cnter++))
    if ((cnt == 3 )) ; then
      cnt=0
    fi

 done < /tmp/split

}

  logger "UDR Stats Process Started"
  logger "Generating List for UDR to download"
#  $expect_dir/udrdl_list.exp $var_usr $var_pn $var_date > $dl_rem_dir/"$var_date"_udrdl_rem_list 
  UdrDLList=`cat $dl_rem_dir/"$var_date"_udrdl_rem_list | grep udr.bz2 | wc -l | awk '{print $1}'` # > /home/mysql/scripts/remote_files_dlList.txt
##  echo $UdrDLList
  logger "Total number of UDR files to Transfer: $UdrDLList"
  cat $dl_rem_dir/"$var_date"_udrdl_rem_list | grep udr.bz2 |  awk '{print $9}' | sed 's/\/mnt\/sandvine.dock\/sandvine\/target\/UDR\///g' > $dl_rem_dir/b_"$var_date"_udrdl_rem_list
  cat $dl_rem_dir/"$var_date"_udrdl_rem_list | grep udr.bz2 |  awk '{print $9}' > $dl_rem_dir/b_"$var_date"c_udrdl_rem_list
  split_file 70 $dl_rem_dir/b_"$var_date"c_udrdl_rem_list $dl_rem_dir spl.txt
  dl_udr_process $var_dmp/udr $dl_rem_dir  $dl_loc_dir $var_date
#  cd $var_dmp/udr 
# ls *"$var_date"*.bz2 |  awk '{print $1}' | sed '/^\s*$/d' >$dl_loc_dir/"$var_date"_udrdl_loc_list
#   DLudr=`cat $dl_loc_dir/"$var_date"_udrdl_loc_list | wc -l`
#  echo $DLudr
#  echo $UdrDLList
#  logger "Total number of Transferred UDR files: $DLudr"
#   sort $dl_rem_dir/b_"$var_date"_udrdl_rem_list  --output=$dl_rem_dir/sorted_"$var_date"dlist
#   sort $dl_loc_dir/"$var_date"_udrdl_loc_list --output=$dl_loc_dir/sorted_"$var_date"_dllist
#   diff -q --ignore-all-space --ignore-blank-lines $dl_rem_dir/sorted_"$var_date"dlist $dl_loc_dir/sorted_"$var_date"_dllist > /tmp/remot_local_chk.txt


# SIMULA DITO
#   if [  -s "/tmp/remot_local_chk.txt" ] ; then
#      echo "FILE not match"
#      logger "Error: Downloaded Files Does not match with Source"
#   else
#      logger "Files Match With Source"
 ##     find $var_dmp/udr -name  'SANDVINE*.bz2' -exec sh $script_dir/new_udr_loader.sh {} \;
 #    udr_etl
      # FOR TOP TALKERS
#       cd $var_dmp/udr
#      logger "Generating Reports for TopTalkers"
#      find $var_dmp/udr -name  'SANDVINE*.udr*.bz2' -exec sh /home/mysql/scripts/toptalker_loader.sh {} \; 

 #  fi
#          logger "Files Match With Source"
#          logger "UDR Decompression proces Started "
# #         load_dmp_prev
#          cd $var_dmp/udr/
#          chk_err_file=`ls *.bz2 | wc -l`
#
#          if [ $chk_err_file -gt 0 ] ; then
#             for abc in `ls *.bz2`
#             do 
#  #               home/mysql/scripts/expect/exp.udr_logs_reprocess.exp $var_usr $var_pn $abc
#  #               load_dmp_prev
#                   echo "getcing"
#                 sleep 1
#              done
#          fi 
#
#          if [ "$?" -ne "0" ]; then
#              echo "Error running udr log report"
#              exit 1
#          else
#              logger "UDR Data Import process Started "
#  #           `$db_conn $db_opt "call sp_tab_maintain()"`
###             `$db_conn $db_opt "TRUNCATE  archive_powerapp_flu.powerapp_udr_log"`
#             `$db_conn $db_opt "TRUNCATE TABLE archive_powerapp_flu.tmp_udr_log_uploads"`
#              find $var_dmp/udr -name  'SANDVINE*.udr' -exec  sh $script_dir/new_udr_loader.sh {} \;
##             `$db_conn $db_opt  "call sp_generate_udr_usage('$proc_date')"`
#   #           rw_cnt=`$db_conn $db_opt "SELECT count(1) from archive_powerapp_flu.powerapp_udr_log WHERE tx_date='$proc_date'"`
#   #          `$db_conn $db_opt "REPLACE INTO total_udr_upload select '$proc_date',sum(rawfile_cnt),$rw_cnt from tmp_udr_log_uploads"`
#              logger "UDR Data Import Completed "
#              logger "UDR Stats Process Completed "
#
#          fi
#
#

#   fi

##cd $var_dmp/udr
##load_exp_prev
##load_dmp_prev
#
####cd /home/mysql/dmp/udr
##cd $var_dmp/udr/
##
##chk_err_file=`ls *.bz2 | wc -l`
##if [ "$?" -ne "0" ]; then
##  chk_err_file=0
##  exit 1
##fi

##echo $chk_err_file
##if [ $chk_err_file -gt 0 ] ; then
##   for abc in `ls *.bz2`
##   do
##     /home/mysql/scripts/expect/exp.udr_logs_reprocess.exp $var_usr $var_pn $abc
##    echo $abc
##    load_dmp_prev
# #   sleep 1
# #  done   
##fi
#
##if [ "$?" -ne "0" ]; then
##  echo "Error running udr log report"
##  exit 1
##else
##    `$db_conn $db_opt "call sp_tab_maintain()"`
###    `$db_conn $db_opt "TRUNCATE  archive_powerapp_flu.powerapp_udr_log"`
##    `$db_conn $db_opt "TRUNCATE TABLE archive_powerapp_flu.tmp_udr_log_uploads"`
##    find $var_dmp/udr -name  'SANDVINE*.udr' -exec  sh /home/mysql/scripts/udr_loader.sh_btrck {} \;
##    `$db_conn $db_opt  "call sp_generate_udr_usage('$proc_date')"` 
##    rw_cnt=`$db_conn $db_opt "SELECT count(1) from archive_powerapp_flu.powerapp_udr_log"`
##    `$db_conn $db_opt "REPLACE INTO total_udr_upload select '$proc_date',sum(rawfile_cnt),$rw_cnt from tmp_udr_log_uploads"`
###fi
